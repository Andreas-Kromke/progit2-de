[[_git_tfs]]
==== TFS

(((TFS)))(((Importieren, aus TFS)))
Wenn Ihr Team seine Versionskontrolle von TFVC nach Git umwandelt, werden Sie die bestmögliche Konvertierung benötigen, die Sie erhalten können.
Das bedeutet, dass wir, während wir sowohl git-tfs als auch git-tf für den Interop-Bereich abgedeckt haben, nur git-tfs für diesen Teil behandeln werden, da git-tfs Branches unterstützt, was bei der Verwendung von git-tf äußerst schwierig ist.

[NOTE]
====
Das ist eine Ein-Weg-Konvertierung.
Das so entstandene Git-Repository kann sich nicht mit dem ursprünglichen TFVC-Projekt verbinden.
====

Als erstes müssen Sie die Benutzernamen zuordnen.
TFVC ist ziemlich großzügig mit dem, was in das Autorenfeld für Change-Sets aufgenommen wird. Aber Git will einen benutzerfreundlichen Namen und eine E-Mail-Adresse.
Sie können diese Informationen vom `tf` Befehlszeilen-Client erhalten, so wie hier:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Dadurch werden alle Change-Sets im Verlauf des Projekts erfasst und in die Datei `AUTHORS_TMP` geschrieben. Wir werden diese Datei verarbeiten, um die Daten der Spalte \'User' (die zweite) zu extrahieren.
Öffnen Sie die Datei und finden Sie heraus, an welchen Zeichen die Spalte beginnt und endet und ersetzen Sie in der folgenden Befehlszeile die Werte `11-20` des `cut` Befehls durch die gefundenen:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS
----

Der Befehl `cut` berücksichtigt nur die Zeichen zwischen 11 und 20 aus jeder Zeile.
Der Befehl `tail` überspringt die ersten beiden Zeilen, die Feld-Header und ASCII-artige Unterstriche sind.
Das Resultat davon wird an `sort` und `uniq` weitergeleitet, um Duplikate zu eliminieren und in der Datei `AUTHORS` gespeichert.
Der nächste Schritt erfolgt manuell. Damit git-tfs diese Datei effektiv nutzen kann, muss jede Zeile in diesem Format vorliegen:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

Der linke Teil ist das Feld „User“ von TFVC und auf der rechten Seite des Gleichheitszeichens ist der Benutzername, der für Git Commits verwendet wird.

Sobald Sie diese Datei haben, ist der nächste Schritt, einen vollständigen Klon des TFVC-Projekts zu erstellen, an dem Sie interessiert sind:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Als nächstes sollten Sie die `git-tfs-id` Abschnitte unten in den Commit-Nachrichten bereinigen.
Die folgende Anweisung erledigt das:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' '--' --all
----

Der verwendete `sed` Befehl aus der Git-bash-Umgebung ersetzt jede Zeile, die mit „git-tfs-id:“ beginnt, durch Leerzeichen, die Git dann ignoriert.

Sobald das alles erledigt ist, können Sie einen neuen Remote hinzufügen, alle Ihre Branches nach oben pushen und Ihr Team aus Git heraus arbeiten lassen.
